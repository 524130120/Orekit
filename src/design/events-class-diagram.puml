' Copyright 2002-2012 CS Systèmes d'Information
' Licensed to CS Systèmes d'Information (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.
 
@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11

  package org.orekit.propagation #ECEBD8

    interface Propagator {
      +void addEventDetector(EventDetector detector)
      +Collection<EventDetector> getEventsDetectors()
      +void clearEventsDetectors()
    }

    package events #DDEBD8

      interface EventDetector {
        +void init(SpacecraftState s0, AbsoluteDate t)
        +double g(SpacecraftState s)
        +Action eventOccurred(SpacecraftState s, boolean increasing)
        +SpacecraftState resetState(SpacecraftState oldState)
        +double getThreshold()
        +double getMaxCheckInterval()
        +int getMaxIterationCount()
      }

      enum EventDetector.Action {
        +STOP
        +RESET_STATE
        +RESET_DERIVATIVES
        +CONTINUE
      }

      class AbstractDetector
      note top
        provides default implementations for
        all methods except the g function
        and eventOccurred
      end note

      class EventShifter {
       -double increasingOffset
       -double decreasingOffset
      }
      EventDetector <--* "1" EventShifter 
      EventShifter --|> AbstractDetector 

      Propagator "1" o--> "*" EventDetector : detectors
      EventDetector.Action <-right-  EventDetector
      EventDetector <|.. AbstractDetector
      AbstractDetector <|-- AltitudeDetector
      AbstractDetector <|-- EclipseDetector
      AbstractDetector <|-- ElevationDetector
      class "...Detector" as DummyDetector
      AbstractDetector <|--DummyDetector
      note top
        many implementations not displayed
        for the sake of diagram clarity
      end note

    end package

  end package

@enduml
