' Copyright 2002-2021 CS GROUP
' Licensed to CS GROUP (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.

@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11
  skinparam PackageFontSize       12
  skinparam linetype              ortho

  package org.orekit #ECEBD8 {

    package data #DDEBD8 {
      class DataSource
    }

    package files.utils.ccsds #DDEBD8 {

      package section #CBDBC8 {
        class HeaderProcessingState
        class KVNStructureProcessingState
        class XMLStructureProcessingState
      }

      package lexical #CBDBC8 {
        interface LexicalAnalyzer
        enum TokenType {
          +START
          +ENTRY
          +STOP
          +RAW_LINE
        }
        class ParseToken {
          +getName()
          +getType()
          +getContent()
          +processAsDouble(doubleConsumer)
          +processAsDate(dateConsumer)
          +processAsFrame(frameConsumer)
          +processAs...(...Consumer)
        }
        interface "MessageParser<T>" as MessageParser {
          +parseMessage(Datasource)
          +reset(FileFormat)
          +process(ParseToken)
          +T build()
        }
      }

      package state #CBDBC8 {
        abstract class "AbstractMessageParser<T>" as AbstractMessageParser {
          #reset(fileFormat, initialState)
          +prepareHeader()
          +inHeader()
          +finalizeHeader()
          +prepareMetadata()
          +inMetadata()
          +finalizeMetadata()
          +prepareData()
          +inData()
          +finalizeData()
          +setFallback(ProcessingState)
        }
        interface ProcessingState {
          +boolean processToken(ParseToken)
        }
      }

      enum FileFormat {
        +KVN
        +XML
      }

      package ndm.odm.opm #CBDBC8 {
        class OPMParser
        note right
          uses method references to
          provide multiple implementations
          of ProcessingState for different
          logical blocks
        end note
        class OPMFile
      }

    }
  }

  DataSource <-- LexicalAnalyzer
  LexicalAnalyzer --> ParseToken : produces
  LexicalAnalyzer <-- MessageParser
  TokenType "1" <--o ParseToken
  ParseToken <-left- ProcessingState
  MessageParser --> FileFormat
  ParseToken <-- MessageParser : "process"
  AbstractMessageParser ..|> MessageParser
  ProcessingState <--o AbstractMessageParser : "current"
  ProcessingState <--o AbstractMessageParser : "fallback"
  OPMParser --> OPMFile : "build"
  HeaderProcessingState       ..|> ProcessingState
  KVNStructureProcessingState ..|> ProcessingState
  XMLStructureProcessingState ..|> ProcessingState
  ProcessingState <|.. OPMParser

@enduml
