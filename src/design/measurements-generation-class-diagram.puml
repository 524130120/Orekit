' Copyright 2002-2018 CS Systèmes d'Information
' Licensed to CS Systèmes d'Information (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.
 
@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11
  skinparam PackageFontSize       12

  package org.hipparchus #ECEBD8 {
      interface RandomVectorGenerator
  }

  package org.orekit #ECEBD8 {

    package estimation.measurements #DDEBD8 {

      package generation #CEEBD8 {

        interface "MeasurementBuilder<T>" as MeasurementBuilder_T_ {
          +addModifier(estimationModifier)
          +T build(spacecraftStates)
         }

        class "...MeasurementBuilder" as XXXMeasurementBuilder
        note left
          one for each
          measurement type
        end note

        class Generator {
          +addScheduler(Scheduler)
          +SortedSet<ObservedMeasurements> generate(startDate, endDate, propagators)
        }

        interface "Scheduler<T>" as Scheduler_T_ {
          +SortedSet<T> generate(interpolators)
        }

        class "PredicateScheduler<T>" as PredicateScheduler_T_

        interface SchedulingPredicate {
          {static} +SchedulingPredicate andCombine(predicates)
          {static} +SchedulingPredicate orCombine(predicates)
          {static} +SchedulingPredicate notCombine(predicate)
          +boolean feasibleMeasurement(spacecraftStates)
        }

        XXXMeasurementBuilder       ..|>          MeasurementBuilder_T_
        Generator                   *--> "*"      Scheduler_T_
        Scheduler_T_                *-right-> "1" MeasurementBuilder_T_
        RandomVectorGenerator "0,1" <--           XXXMeasurementBuilder : noise source
        Scheduler_T_                <|..          PredicateScheduler_T_
        PredicateScheduler_T_       -right-> "1"  SchedulingPredicate
        SchedulingPredicate         <|..          VisibleFromGround  
        SchedulingPredicate         <|..          InterSatVisibility
        SchedulingPredicate         <|..          GroundAtNight  
        SchedulingPredicate         <|..          Sunlit  

      }

      interface "EstimationModifier<T>" as EstimationModifier_T_
      interface "ObservedMeasurement<T>" as ObservedMeasurement_T_
      class "...Measurement" as XXXMeasurement
      note bottom
        this box represents any
        measurement type
        (range, range-rate, ...)
      end note

 
      EstimationModifier_T_  "*" <--*          ObservedMeasurement_T_ 
      ObservedMeasurement_T_     <|..          XXXMeasurement
      XXXMeasurementBuilder       -->          XXXMeasurement
      XXXMeasurementBuilder     *-right->  "*" EstimationModifier_T_ 

    }

   package propagation #DDEBD8 {
      interface PropagatorsParallelizer {
        propagate()
      }
      interface OrekitStepInterpolator
      PropagatorsParallelizer <-left- Generator
      PropagatorsParallelizer -->     OrekitStepInterpolator
      OrekitStepInterpolator  <-left- Scheduler_T_
    }

  }

  package mission.specific #C4D2C5 {
    class "CustomScheduler<T>" as CustomScheduler_T_ #D5E0D5/E2EBE2
    CustomScheduler_T_ ..|> Scheduler_T_
  }

@enduml
