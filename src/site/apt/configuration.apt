~~ Copyright 2002-2008 CS Communication & Syst√®mes
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

Configuration

  The Orekit library relies on some external data for physical models. Typical
  data are the Earth Orientation Parameters and the leap seconds history, both being
  provided by the IERS or the planetary ephemerides provided by JPL. Such data is
  stored in text or binary files with specific formats that Orekit knows how to read.
  These files can be embedded with the application or externally provided.

  Orekit must be configured appropriately to find and use such data.

* Data sets

  For user convenience, data that is a few tens of kilobytes and can be assumed to never
  change like precession-nutation models or atmospheric models are already embedded in
  the core library. Small and simple data sets are defined by setting constants in the
  code itself. This is the case for offset between Terrestrial Time and International
  Atomic Time scales for example. Large or complex data sets are embedded by copying the
  corresponding resource files inside the compiled jar, under the META-INF directory as
  is usual with the Java language. This is the case for the IAU-2000 precession-nutation
  model tables for example. There is nothing to configure for these data sets as they are
  embedded within the library.

  Some useful data is huge or can change over time. Such data sets cannot be realistically
  embedded within a specific version of the library on the long run. A typical example
  for such data set is Earth Orientation Parameters which are mandatory for accurate frames
  conversion or planetary ephemerides. IERS regularly publishes new Earth Orientation Parameter
  files covering new time ranges whereas planetary ephemerides represent megabytes-sized files.
  Orekit knows how to find and read these data sets which should be provided by user at run
  time, provided it is properly configured.

* Data directories trees

  Data sets stored externally to the library must be stored as simple files directories trees
  with read access permission. Two types of directories trees are supported: one is defined with
  respect to the filesystem (i.e. with an absolute path), one is defined with respect
  to the classpath (i.e. either with a relative path or with an absolute path within a
  jar file). If both trees are configured, data is searched first in the filesystem
  tree and search is attempted in the second tree only if the first one fails.
  The filesystem choice is more convenient for user-specific data or for data that
  should be shared with other tools. The classpath choice is more convenient for system-wide
  data shared by several users, for remote and embedded usage or for test data in
  development projects (this is how Orekit own test data is found). Classpath based directories
  trees can also be embedded within a single jar file, which greatly simplifies data handling
  and configuration of autonomous or embedded systems.

[./images/directories-tree.png]

  There is no mandatory layout within the data directories trees. Orekit navigates through
  them and their sub-directories when looking for data files. Files are identified by
  pattern matching rules on their names. Files that don't match the rules are silently
  ignored. This allows the user to share the data directories trees with other tools which
  need a specific layout or additional files. A drawback of this behavior is that if the
  users sets up a deep data directory tree containing a huge number of files, Orekit may need
  some time to explore it, even if it really reads only a small subset of the total number
  of files.

*----------------------------------*---------------- ------------------------------*
|          java property           |                    usage                      |
*----------------------------------*------------------ ----------------------------*
| orekit.data.directory.filesystem | root of a data directories tree in filesystem |
*----------------------------------*-----------------------------------------------*
| orekit.data.directory.classpath  | root of a data directories tree in classpath  |
*----------------------------------*-----------------------------------------------*
configuration parameters

  There are only two configuration parameters for Orekit, set up as java properties. The
  <orekit.data.directory.filesystem> property configures the root of the highest priority tree
  located in filesystem. The <orekit.data.directory.classpath> property configures the root of
  the lowest priority tree located in classpath. As any other java property, they can be
  initialized at application launch time by the user (for example using the -D flag of the
  virtual machine) or from within the application by calling the <System.setProperty> method.
  In the latter case, rather than the literal string constants <orekit.data.directory.filesystem>
  or <orekit.data.directory.classpath>, the <DATA_ROOT_DIRECTORY_FS> or <DATA_ROOT_DIRECTORY_CP>
  static fields from the <DataDirectoryCrawler> class can be used. If the properties are set up
  by the application, it must be done before any Orekit feature is called, since some data
  are initialized very early (mainly frame and time related data).

* Quick setup using default data

  For convenience, a jar file containing some default data is available for download on
  orekit site: {{http://www.orekit.org/downloads/orekit-data.jar}}. Putting this jar
  file on your classpath and setting the <orekit.data.directory.classpath> property to
  the value <<</orekit-data>>> (which is a directory with the jar file) is all that is
  needed to use it. Similar files can be custom made by users with updated data.

* Supported data files

  The data files supported by Orekit are described in the following table, where the <#>
  character represent any digit. The <[.gz]> part at the end of all naming patterns
  means that a <.gz> suffix can be appended, in which case the files are considered to
  be compressed with gzip. Compressed files are uncompressed in memory upon reading (the
  compressed files are preserved on disk). Compressing text-based files like bulletinB
  or EOPC04 saves a lot of disk space, but compressing the JPL binary files does almost
  not save anything. Using compressed files for a classpath tree stored within a jar file
  is also irrelevant as jar files are themselves compressed and stacking compression
  algorithm only slows down reading speed without any disk space gain.

*---------------------------------*-----------------*--------------------------------------*------------------------------------------------------------*
|       file naming pattern       |      format     |               data type              |                            source                          |
*---------------------------------*-----------------*--------------------------------------*------------------------------------------------------------*
|       UTC-TAI.history[.gz]      |   IERS history  |   leap seconds introduction history  |  {{http://hpiers.obspm.fr/eoppc/bul/bulc/UTC-TAI.history}} |
*---------------------------------*-----------------*--------------------------------------*------------------------------------------------------------*
|  bulletinb_IAU2000-###.txt[.gz] | IERS bulletin B | monthly Earth Orientation Parameters | {{http://www.iers.org/MainDisp.csl?pid=36-25788&prodid=18}}|
*---------------------------------*-----------------*--------------------------------------*------------------------------------------------------------*
|      eopc04_IAU2000.##[.gz]     | IERS EOP 05 C04 | yearly Earth Orientation Parameters  |{{http://www.iers.org/MainDisp.csl?pid=36-25788&prodid=179}}|
*---------------------------------*-----------------*--------------------------------------*------------------------------------------------------------*
|         unxp####.405[.gz]       |  DE 405 binary  |    JPL DE 405 planets ephemerides    |    {{ftp://ssd.jpl.nasa.gov/pub/eph/planets/unix/de405}}   |
*---------------------------------*-----------------*--------------------------------------*------------------------------------------------------------*
supported data files

  There should generally be only one leap seconds introduction history file. However, since
  Orekit always explores all the data directories tree, a safety measure has been added in case
  older files remain around: all files are combined together and duplicates are removed, so the
  complete data set correspond to the file with the largest number of entries, regardless of its
  location within the tree. The entries read are then combined with a predefined set of entries that
  is already embedded within Orekit, hence the file is optional if a sufficiently recent version
  of the library is used. As of 2008, the predefined set contains all leap seconds history from
  1972-01-01 to 2009-01-01.

  All Earth Orientation Parameters files are combined together and should constitute a continuous
  time-line without holes. If data for a given date is not available, no errors are triggered
  and default values are used. The default values are zero angular offsets for pole motion and
  zero time offset for dTU1.

* Authors

  ** Luc Maisonobe  