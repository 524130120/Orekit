~~ Copyright 2002-2010 CS Communication & Syst√®mes
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

Building Orekit

  Orekit can be built from source using several different tools.
  
  All these tools are Java based and can run on many different operating
  systems, including Unix, GNU/Linux, Windows and Mac OS X. Some GNU/Linux
  distributions provide these tools in their packages repositories (for
  exemple Debian Lenny provides all of them but Debian Etch does not
  provide maven 2).

* Building with Maven 2

  {{{http://maven.apache.org/}Maven}} is a build tool that goes far beyond
  simply compiling and packaging a product. It is also able to resolve
  dependencies (including downloading the appropriate versions from the public
  repositories), to run automated tests, to launch various checking tools and
  to create a web site for a project. It runs on any platform supporting Java.
  
  For systems not providing maven as a package, maven can be downloaded
  from its site at the Apache Software Foundation:
  {{http://maven.apache.org/download.html}}, this page also explains the
  installation procedure.

  As all maven enabled projects, building Orekit is straigthforward, simply
  run:

+-------
mvn package
+-------

  The preceding command will perform all dependencies retrieval, compilation,
  tests and packaging for you. At the end, it will create a file named
  target/orekit-x.y.jar where x.y is the version number.

  If you need to configure a proxy server for dependencies retrieval, see
  the
  {{{http://maven.apache.org/guides/mini/guide-proxies.html}Guide to using proxies}}
  page at the maven site.

  If you already use maven for your own projects (or simply eclipse, see
  below), you may want to install Orekit in your local repository. This is done
  with the following command:

+-------
mvn install
+-------

  For other commands like generating the site, or generating the
  {{{http://checkstyle.sourceforge.net/}checkstyle}},
  {{{http://findbugs.sourceforge.net/}findbugs}} or
  {{{http://cobertura.sourceforge.net/}cobertura}} reports, see the maven
  plugins documentation at maven site:
  {{http://maven.apache.org/plugins/index.html}}.

* Building with Ant

  {{{http://ant.apache.org/}Ant}} is another well known build tool. It is
  more ancient than maven and widely used. It does not provide as much
  features as maven (no site generation for example) but is very extensible.

  For systems not providing ant as a package, it can be downloaded from its
  site at the Apache Software Foundation: {{http://ant.apache.org/bindownload.cgi}}.
  The installation procedure is explained in the
  {{{http://ant.apache.org/manual/index.html}on-line manual}}.

  If you need to configure a proxy server for dependencies retrieval, see
  the
  {{{http://ant.apache.org/manual/index.html}Proxy configuration}}
  page at the ant site.

  Compiling is done by running the command:

+-------
ant
+-------

  Just as maven does, this command also retrieve the dependencies from
  public repositories, compiles the sources and creates a file named
  build/orekit-x.y.jar where x.y is the version number.


* Building with Eclipse

  {{{http://www.eclipse.org/}Eclipse}} is a very rich Integrated Development
  Environment (IDE). It is a huge product and not a simple build tool.

  For systems not providing eclipse as a package, it can be downloaded from its
  site at the Eclipse Foundation: {{http://www.eclipse.org/downloads/}}.

  The simplest way to use Orekit with Eclipse is to follow these steps:

    * unpack the distribution inside your Eclipse workspace

    * create a new java project from existing sources and direct Eclipse to the
       directory where you unpacked Orekit

    * set the source folders to orekit/src/main/java, orekit/src/main/resources,
      orekit/src/test/java, orekit/src/test/resources, orekit/src/tutorials in
      the source tab of the Configure Build Path dialog

    * set the external libraries to JRE system library (provided by Eclipse),
      Junit 4.x (provided by Eclipse) and commons-math 2.2 (available at
      Apache Software Foundation commons-math
      {{{http://commons.apache.org/downloads/download_math.cgi}downloads page}})
      in the libraries tab of the Configure Build Path dialog
