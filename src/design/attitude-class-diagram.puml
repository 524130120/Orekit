' Copyright 2002-2012 CS Systèmes d'Information
' Licensed to CS Systèmes d'Information (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.

@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11

  package org.orekit #ECEBD8

    package frames #DDEBD8
      class Frame
    end package

    package time #DDEBD8
      interface TimeStamped {
        +AbsoluteDate getDate()
      }
      interface "TimeShiftable<T>" as TimeShiftable_T_ {
        +T shiftedBy(double dt)
      }
    end package

    package attitude #DDEBD8

      class Attitude {
	    +Vector3D estimateSpin
    	+Attitude withReferenceFrame
    	+Frame getReferenceFrame
        +Rotation getRotation
	    +Vector3D getSpin
      }

      class AttitudesSequence {
        +void resetActiveProvider
        +void registerSwitchEvents
        +void addSwitchingCondition
      }

      interface AttitudeProvider {
        + Attitude getAttitude(PVCoordinatesProvider pvProv, AbsoluteDate date, Frame frame)
      }

      interface AttitudeProviderModifier {
        +AttitudeProvider getUnderlyingAttitudeProvider()
      }

      class SpinStabilized {
        +AttitudeProvider getNonRotatingLaw()
      }

      abstract class GroundPointing {
        #Vector3D getTargetPoint
        #PVCoordinates getTargetPV
      }

      class FixedRate {
        +Attitude getReferenceAttitude()
      }

      abstract class GroundPointingWrapper {
        +Attitude getBaseState
        +Rotation getCompensation
      }

      Frame            <-up- "1" Attitude 
      Attitude         <-up- AttitudeProvider : create
      TimeStamped      <|.. Attitude
      TimeShiftable_T_ <|.. Attitude
      AttitudeProvider <|-- AttitudeProviderModifier
      AttitudesSequence ..|> AttitudeProvider 
      AttitudesSequence "*" o--> AttitudeProvider
      AttitudeProvider <|.. GroundPointing
      GroundPointing   <|-- GroundPointingWrapper

      AttitudeProviderModifier     <|-- SpinStabilized
      AttitudeProviderModifier     <|-- GroundPointingWrapper
      GroundPointing               <|-- BodyCenterPointing
      GroundPointing               <|-- NadirPointing
      GroundPointing               <|-- TargetPointing
      GroundPointing               <|-- LofOffsetPointing
      LofOffsetPointing        "1" *--> AttitudeProvider
      GroundPointingWrapper    "1" *--> GroundPointing
      GroundPointingWrapper        <|-- YawCompensation
      GroundPointingWrapper        <|-- YawSteering
      AttitudeProvider             <|-- CelestialBodyPointed
      AttitudeProvider             <|-- FixedRate
      AttitudeProvider             <|-- InertialProvider
      AttitudeProvider             <|-- LofOffset

    end package

  end package

@enduml
