~~ Copyright 2002-2008 CS Communication & Systèmes
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

Frames

  This tutorial shows a smart usage of frames and transforms in OREKIT.

* The problem to be solved

  The problem is related to the one exposed in the <User defined frames> subsection of the
  {{{../architecture/frames.html}frames section}} of the library architecture documentation.
  
  It can be summarized by the following scheme.

[../images/frames1-tutorial.png]

  For a given satellite, GPS measurements for position and velocity, expressed in the ITRF2005 frame,
  are available at any moment.\
  The GPS antenna is fixed with some offset in the satellite reference frame.\
  The attitude of the satellite reference frame with respect to the LOF can be known at any moment.\
  And we want to know at some instant the position and velocity of the satellite center of gravity
  in the EME2000 inertial frame.

* A simple solution

  The solution provided by OREKIT is detailed above. All the numerical input values are indifferent.

  The local orbital frame (LOF) has its origin at the satellite center of gravity (CoG).\
  It is derived from EME2000 frame at any moment by an unknown transform which relies
  on the current position and velocity to be found.

  Let's initialize this transform by the identity transform:
  
+---------------------
Frame lofFrame = new Frame(Frame.getEME2000(), Transform.IDENTITY, "LOF");
+---------------------

  Let's consider some measurement date in UTC time scale:
  
+---------------------
TimeScale utc = UTCScale.getInstance();
AbsoluteDate date = new AbsoluteDate(2008, 10, 01, 12, 00, 00.000, utc);
+---------------------
            
  The satellite frame, with origin the CoG, is related to the LOF.\
  The satellite attitude with respect to LOF can be known at all times
  by the (roll, pitch, yaw) angles according to some guidance laws.\
  Let's assume the following values at the date:

+---------------------
double roll  = Math.toRadians(15);
double pitch = Math.toRadians(10);
double yaw   = Math.toRadians(5);
+---------------------

  The transform from LOF to satellite at that instant is defined by this rotation.

+---------------------
Transform loftosat = new Transform(new Rotation(RotationOrder.XYZ, roll, pitch, yaw));
+---------------------

  So the satellite CoG frame is defined with respect to the LOF.

+---------------------
Frame cogFrame = new Frame(lofFrame, loftosat, "CoG");
+---------------------

  Finally, the GPS antenna frame is allways defined from the satellite
  CoG frame by 2 transforms: a translation and a rotation.\
  Let's set some values:

+---------------------
Transform translateGPS = new Transform(new Vector3D(0, 0, 1));
Transform rotateGPS = new Transform(new Rotation(new Vector3D(0, 1, 3), Math.toRadians(10)));
Frame gpsFrame = new Frame(cogFrame, new Transform(translateGPS, rotateGPS), "GPS");
+---------------------

  Then let's get some satellite position and velocity in ITRF2005
  as measured by GPS antenna at this moment:

+---------------------
  Vector3D position = new Vector3D(-6142438.668, 3492467.560, -25767.25680);
  Vector3D velocity = new Vector3D(505.8479685, 942.7809215, 7435.922231);
+---------------------

  The transform from GPS frame to ITRF2005 frame at this moment is defined by:
  
+---------------------
Transform gpstoitrf = new Transform(position, velocity);
+---------------------

  So we can now update the transform from EME2000 to LOF frame.
  
  The <updateTransform> method automatically locates the frames
  in the global tree, combines all transforms and updates the single
  transform between LOF itself and its parent EME2000 frame.

+---------------------
lofFrame.updateTransform(gpsFrame, Frame.getITRF2005(), gpstoitrf, date);
+---------------------

  So we can compute the desired position and velocity of satellite CoG in EME2000 frame.
  
+---------------------
PVCoordinates satEME2000 = lofFrame.getTransformTo(Frame.getEME2000(), date).transformPVCoordinates(PVCoordinates.ZERO);
+---------------------

  As a result, we can compare the GPS measurements to the computed values:
  
+---------------------
Position in ITRF2005 from GPS measurement : {-6 142 438,67; 3 492 467,56; -25 767,26}
Velocity in ITRF2005 from GPS measurement : {505,85; 942,78; 7 435,92}
Position in EME2000 from update transform : {6 675 099,96; -2 317 238,35; -31 505,62}
Velocity in EME2000 from update transform : {-150,51; -532,04; 7 436,07}
+---------------------

  The complete code for this example can be found in the source tree of the library,
  in file <<<src/tutorials/fr/cs/examples/frames/Frame1.java>>>.
