' Copyright 2002-2012 CS Systèmes d'Information
' Licensed to CS Systèmes d'Information (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.
 
@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11

  package org.orekit.frames #ECEBD8

    class Transform {
      +Transform IDENTITY
      +Transform getInverse()
      +Transform freeze()
      +Vector3D transformPosition(Vector3D position)
      +Vector3D transformVector(Vector3D vector)
      +Line transformLine(Line line)
      +PVCoordinates transformPVCoordinates(PVCoordinates pv)
      +void getJacobian(double[][] jacobian)
      +Vector3D getTranslation()
      +Vector3D getVelocity()
      +Rotation getRotation()
      +Vector3D getRotationRate()
    }

    class Frame {
      +String getName()
      +boolean isPseudoInertial()
      +Frame getParent()
      +Transform getTransformTo(Frame destination, AbsoluteDate date)
      +Frame getFrozenFrame(Frame reference, AbsoluteDate freezingDate, String frozenName)
      #void updateFrame(AbsoluteDate date)
      #Frame getRoot()
    }
    note bottom
      the implementations shown here are only
      a subset of available frames
    end note

    class FramesFactory {
      +Frame getGCRF()
      +Frame getICRF()
      +FactoryManagedFrame getEME2000()
      +FactoryManagedFrame get...()
      +Frame getFrame(Predefined factoryKey)
    }

    enum Predefined {
      +GCRF
      +ICRF
      +EME2000
      +ITRF_2008_WITHOUT_TIDAL_EFFECTS
      +ITRF_2008_WITH_TIDAL_EFFECTS
      +ITRF_2005_WITHOUT_TIDAL_EFFECTS
      +ITRF_...
      +ITRF_EQUINOX
      +TIRF_2000_WITHOUT_TIDAL_EFFECTS
      +TIRF_2000_WITH_TIDAL_EFFECTS
      +CIRF_2000
      +VEIS_1950
      +GTOD_WITHOUT_EOP_CORRECTIONS
      +GTOD_WITH_EOP_CORRECTIONS
      +TOD_WITHOUT_EOP_CORRECTIONS
      +TOD_WITH_EOP_CORRECTIONS
      +MOD_WITHOUT_EOP_CORRECTIONS
      +MOD_WITH_EOP_CORRECTIONS
      +TEME
    }

    class EME2000Frame
    class ITRFFrame
    class MODFrame
    class LOFFrame
    class TopocentricFrame

    FactoryManagedFrame -down-|>   Frame
    FactoryManagedFrame *-down->   Predefined
    FramesFactory       *-right->  FactoryManagedFrame
    Frame               <|--       EME2000Frame
    Frame               <|--       ITRFFrame
    Frame               <|--       MODFrame
    Frame               <|--       LOFFrame
    Frame               <|--       TopocentricFrame
    FramesFactory       *-->       Frame     : predefined frames
    Frame               o-->       Frame     : parent
    Frame               o-up->     Transform : transform from parent

  end package

@enduml
