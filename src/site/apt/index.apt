~~ Copyright 2002-2011 CS Communication & Syst√®mes
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

Overview

  OREKIT (ORbits Extrapolation KIT) is a free low level space dynamics library
  written in Java.

  It provides basic elements (orbits, dates, attitude, frames ...) and
  various algorithms to handle them (conversions, analytical and numerical
  propagation, pointing ...).

* Features

  ** Time

    * high accuracy absolute dates

    * time scales (TAI, UTC, UT1, GPS, TT, TCG, TDB, TCB, GMST, GST ...)

    * transparent handling of leap seconds

  ** Geometry

    * frames hierarchy supporting fixed and time-dependent
      (or telemetry-dependent) frames

    * predefined frames (EME2000/J2000, ICRF, GCRF, ITRF93, ITRF97, ITRF2000, ITRF2005, ITRF2008
      and intermediate frames, TOD, MOD, GTOD and TOD frames, Veis, topocentric, tnw and qsw
      local orbital frames, spacecraft body, Moon, Sun, planets, solar system barycenter,
      Earth-Moon barycenter)

    * user extensible (used operationally in real time with a set of about 60 frames on
      several spacecrafts)

    * transparent handling of IERS Earth Orientation Parameters (for both new
      CIO-based frames and old equinox-based frames)

    * transparent handling of JPL DE 405 and DE 406 ephemerides

    * transforms including kinematic combination effects

    * composite transforms reduction and caching for efficiency

    * extensible central body shapes models (with predefined spherical and ellipsoidic shapes)

    * cartesian and geodesic coordinates, kinematics

  ** Spacecraft state

    * cartesian, elliptical keplerian, circular and equinoctial parameters

    * Two-Lines Elements

    * transparent conversion between all parameters

    * automatic binding with frames

    * attitude state and derivative

    * Jacobians

    * mass management

  ** Maneuvers

    * analytical models for small maneuvers without propagation

    * impulse maneuvers for any propagator type

    *continuous maneuvers for numerical propagator type

  ** Propagation

    * analytical propagation models
      (Kepler, Eckstein-Heschler, SDP4/SGP4 with 2006 corrections)

    * numerical propagators

      * customizable force models

        * central attraction

        * gravity models
          (automatic reading of ICGEM (new Eigen models), SHM (old Eigen models),
          EGM and GRGS gravity field files formats, even compressed)

        * atmospheric drag (DTM2000, Jacchia-Bowman 2006 and simple exponential models)

        * third body attraction (with data for Sun, Moon and all solar systems planets)

        * radiation pressure with eclipses

        * multiple maneuvers

      * state of the art ODE integrators (adaptive stepsize with error control,
        continuous output, switching functions, G-stop, step normalization ...)

      * computation of jacobians with respect to orbital parameters and selected
        force models parameters

      * serialization mechanism to store complete results on persistent storage for
        later use

    * tabulated ephemerides

      * file based

      * memory based

      * integration based

    * unified interface above analytical/numerical/tabulated propagators for easy
      switch from coarse analysis to fine simulation with one line change

    * all propagators can be used in several different modes

      * slave mode: propagator is driven by calling application

      * master mode: propagator drives application callback functions

      * ephemeris generation mode: all intermediate results are stored during
        propagation and provided back to the application which can navigate at will
        through them, effectively using the propagated orbit as if it was an
        analytical model, even if it really is a numerically propagated one, which
        is ideal for search and iterative algorithms

    * handling of discrete events during integration
      (models changes, G-stop, simple notifications ...)

    * predefined discrete events

      * eclipse (both umbra and penumbra)

      * ascending and descending node crossing

      * apogee and perigee crossing

      * alignment with some body in the orbital plane
        (with customizable threshold angle)

      * raising/setting with respect to a ground location
        (with customizable triggering elevation)

      * altitude crossing

      * target detection in sensor field of view (circular or dihedral)

      * date

      * impulse maneuvers occurrence

    * possibility to slightly shift events in time (for example to switch from
      solar pointing mode to something else a few minutes before eclipse entry and
      reverting to solar pointing mode a few minutes after eclipse exit)

  ** Attitude

    * extensible attitude evolution models

    * predefined laws

      * central body related attitude
        (nadir pointing, center pointing, target pointing,
         yaw compensation, yaw-steering),

      * orbit referenced attitudes
        (LOF aligned, offset on all axes),

      * space referenced attitudes
        (inertial, celestial body pointed, spin stabilized)

  ** Customizable data loading

    * loading from local disk
 
    * loading from classpath
 
    * loading from network (even through internet proxies)

    * support for zip archives

    * support from gzip compressed files

    * plugin mechanism to delegate loading to user defined database or data access library

  ** Localized in several languages

    * english

    * french

    * galician

    * german

    * italian

    * norse

    * spanish

* Free software

  Orekit is freely available both in source and binary formats, with all related
  documentation and tests.

  It is distributed under the {{{./license.html}Apache License Version 2.0}}. This
  is a well known business-friendly license. This means anybody can use it to build
  any application, free or not. There are no strings attached to your own code.

  Everybody is encouraged to use Orekit as a common low level layer to help
  interoperability in space systems.

* Maintained library

  Orekit has been in development since 2002 inside {{{http://uk.c-s.fr/}CS Communication
  & Syst\u00e8mes}} and is still used and maintained by its space dynamics experts.
  It has already been successfully used during the real time monitoring of the rendez-vous
  phase between the Automated Transfer Vehicle (ATV) and the International Space Station
  (ISS) by the Centre National d'\u00c9tudes Spatiales (CNES, the French space agency) and
  European Space Agency (ESA).
