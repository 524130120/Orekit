' Copyright 2002-2021 CS GROUP
' Licensed to CS GROUP (CS) under one or more
' contributor license agreements.  See the NOTICE file distributed with
' this work for additional information regarding copyright ownership.
' CS licenses this file to You under the Apache License, Version 2.0
' (the "License"); you may not use this file except in compliance with
' the License.  You may obtain a copy of the License at
'
'   http://www.apache.org/licenses/LICENSE-2.0
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS,
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
' See the License for the specific language governing permissions and
' limitations under the License.

@startuml

  skinparam svek                  true
  skinparam ClassBackgroundColor  #F3EFEB/CCC9C5
  skinparam ClassArrowColor       #691616
  skinparam ClassBorderColor      #691616
  skinparam NoteBackgroundColor   #F3EFEB
  skinparam NoteBorderColor       #691616
  skinparam NoteFontColor         #691616
  skinparam ClassFontSize         11
  skinparam PackageFontSize       12
  skinparam linetype              ortho

  package org.orekit #ECEBD8 {

    package data #DDEBD8 {
      interface DataFilter {
        NamedData filter(NamedData)
      }
      class NamedData {
        +getName()
        +getStreamOpener()
      }
      DataFilter --> NamedData
    }

    package files #DDEBD8 {
      package utils.ccsds #CBDBC8 {

        enum FileFormat {
          +KVN
          +XML
        }

        package state #CCCCC7 {
          abstract class "AbstractMessageParser<T>" as AbstractMessageParser {
            #reset(fileFormat, initialState)
            +prepareHeader()
            +inHeader()
            +finalizeHeader()
            +prepareMetadata()
            +inMetadata()
            +finalizeMetadata()
            +prepareData()
            +inData()
            +finalizeData()
            +setFallback(ProcessingState)
          }
          interface ProcessingState {
            +boolean processToken(ParseToken)
          }
        }

        package lexical #CCCCC7 {
          class KVNLexicalAnalyzer
          class XMLLexicalAnalyzer
          interface LexicalAnalyzer
          enum TokenType {
            +START
            +ENTRY
            +STOP
            +RAW_LINE
          }
          class ParseToken
          interface "MessageParser<T>" as MessageParser {
            +reset(FileFormat)
            +process(ParseToken)
            +T build()
          }
        }

        package section #CCCCC7 {
          class HeaderProcessingState
          class KVNStructureProcessingState
          class XMLStructureProcessingState
        }

        package ndm.odm.opm #CCCCC7 {
          class OPMParser
          class OPMFile
        }
        note bottom
          only OPM is shown here,
          similar constructions exist
          for other messages types:
          OEM, OMM, OCM, AEM,
          APM, TDM...
        end note

      }
    }
  }

  NamedData <-- KVNLexicalAnalyzer
  NamedData <-- XMLLexicalAnalyzer
  KVNLexicalAnalyzer ..|> LexicalAnalyzer
  XMLLexicalAnalyzer ..|> LexicalAnalyzer
  LexicalAnalyzer --> MessageParser : "accept"
  TokenType "1" <--o ParseToken
  ProcessingState --> ParseToken
  FileFormat <-left- MessageParser
  ParseToken <-left- MessageParser : "process"
  MessageParser <|.. AbstractMessageParser
  ProcessingState <-down-o AbstractMessageParser : "current"
  ProcessingState <-down-o AbstractMessageParser : "fallback"
  OPMParser --> OPMFile : "build"
  ProcessingState <|.. HeaderProcessingState
  ProcessingState <|.. KVNStructureProcessingState
  ProcessingState <|.. XMLStructureProcessingState
  ProcessingState <|.. OPMParser : "multiple section-specific implementations"

@enduml
