~~ Copyright 2002-2008 CS Communication & Syst√®mes
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

Frames

* Basic use

** The problem to be solved

  We want to compute the Doppler effect of a satellite with respect to
  a ground station.

** A simple solution

** Source code

  The complete code for this example can be found in the source tree of the library,
  in file <<<src/tutorials/fr/cs/examples/frames/Frame1.java>>>.

* Advanded use

** The problem to be solved

  The problem is related to the one exposed in the <User defined frames> subsection of the
  {{{../architecture/frames.html}frames section}} of the library architecture documentation.
  
  It can be summarized by the following scheme.

[../images/frames1-tutorial.png]

  For a given satellite, GPS measurements for position and velocity, expressed in the ITRF2005 frame,
  are available at any moment.\
  The GPS antenna is fixed with some offset with respect to the satellite reference frame.\
  The attitude of the satellite reference frame with respect to the LOF is known at any moment.\
  We want to compute for some instant the position and velocity of the satellite center of gravity
  in the EME2000 inertial frame.

** A simple solution

  The solution provided by OREKIT is detailed above.

  The Center of Gravity frame has its origin at the satellite center of gravity and is
  aligned with EME2000. It is linked to its parent EME2000 frame by an a priori unknown transform
  which depends on the current position and velocity. This transform is what we want to compute.

  We first build the frame. We use the identity transform as a simple dummy value, the
  real value which is time-dependent will be recomputed when time is reset:
  
+---------------------
Frame cogFrame = new Frame(Frame.getEME2000(), Transform.IDENTITY, "LOF");
+---------------------

  The satellite frame, with origin also at the CoG, depends on attitude. For the sake of this
  tutorial, we consider a simple inertial attitude here:

+---------------------
Transform cogToSat = new Transform(new Rotation(0.6, 0.48, 0, 0.64, false));
Frame satFrame = new Frame(cogFrame, cogToSat, "sat");
+---------------------

  Finally, the GPS antenna frame is always defined from the satellite
  frame by 2 transforms: a translation and a rotation. Let's set some values:

+---------------------
Transform translateGPS = new Transform(new Vector3D(0, 0, 1));
Transform rotateGPS    = new Transform(new Rotation(new Vector3D(0, 1, 3), Math.toRadians(10)));
Frame gpsFrame         = new Frame(satFrame, new Transform(translateGPS, rotateGPS), "GPS");
+---------------------

  Let's consider some measurement date in UTC time scale:
  
+---------------------
TimeScale utc = UTCScale.getInstance();
AbsoluteDate date = new AbsoluteDate(2008, 10, 01, 12, 00, 00.000, utc);
+---------------------
            
  Then let's get some satellite position and velocity in ITRF2005
  as measured by GPS antenna at this moment:

+---------------------
Vector3D position = new Vector3D(-6142438.668, 3492467.560, -25767.25680);
Vector3D velocity = new Vector3D(505.8479685, 942.7809215, 7435.922231);
+---------------------

  The transform from GPS frame to ITRF2005 frame at this moment is defined by
  a translation and a rotation. The translation is directly provided by the
  GPS measurement above. The rotation is extracted from the existing tree, where
  we know all rotations are already up to date, even if one translation is still
  unknown. We combine the extracted rotation and the measured translation by
  applying the rotation first because the position/velocity vector are given in
  ITRF frame not in GPS antenna frame:
  
+---------------------
Transform measuredTranslation = new Transform(position, velocity);
Transform formerTransform     = gpsFrame.getTransformTo(Frame.getITRF2005(), date);
Transform preservedRotation   = new Transform(formerTransform.getRotation(),
                                              formerTransform.getRotationRate());
Transform gpsToItrf           = new Transform(preservedRotation, measuredTranslation);
+---------------------

  So we can now update the transform from EME2000 to CoG frame.
  
  The <updateTransform> method automatically locates the frames
  in the global tree, combines all transforms and updates the single
  transform between CoG itself and its parent EME2000 frame.

+---------------------
cogFrame.updateTransform(gpsFrame, Frame.getITRF2005(), gpsToItrf, date);
+---------------------

  The frame tree is now in sync. We can compute all position and velocity
  pairs we want:
  
+---------------------
Transform cogToItrf   = cogFrame.getTransformTo(Frame.getITRF2005(), date);
PVCoordinates satItrf = cogToItrf.transformPVCoordinates(PVCoordinates.ZERO);
+---------------------

+---------------------
Transform cogToEme2000   = cogFrame.getTransformTo(Frame.getEME2000(), date);
PVCoordinates satEME2000 = cogToEme2000.transformPVCoordinates(PVCoordinates.ZERO);
+---------------------

  As a result, we can compare the GPS measurements to the computed values:
  
+---------------------
GPS antenna position in ITRF2005: {-6142438.668; 3492467.560; -25767.257}
GPS antenna velocity in ITRF2005: {505.8479685; 942.7809215; 7435.9222310}
Satellite position in ITRF2005: {-6142439.167; 3492468.238; -25766.717}
Satellite velocity in ITRF2005: {505.8480179; 942.7809579; 7435.9222310}
Satellite position in EME2000: {6675100.632; -2317238.909; -31506.077}
Satellite velocity in EME2000: {-150.5129516; -532.0397437; 7436.0742692}
+---------------------

** Source code

  The complete code for this example can be found in the source tree of the library,
  in file <<<src/tutorials/fr/cs/examples/frames/Frame2.java>>>.
